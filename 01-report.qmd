---
title: "Example Quarto Report"
author: "Heidi Steiner"
date: "`r Sys.Date()`"
format: html
execute: 
  echo: false
---


```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(echo = TRUE)

library(knitr)
library(skimr)
library(survival)
library(tidyverse)

ggplot2::theme_set(ggplot2::theme_minimal())
```

## Clinical Trial/Study Report 

The lung data set is found in the [`survival`](https://github.com/therneau/survival) R package. Try to load the lung data set in R by issuing the following commands at the console:

```{r}
#| eval: false
install.packages("survival")
library(survival)
lung
```

See the **data dictionary** in the markdown table below: 

|Column Name|Key|
|:-------|:--|
|inst|Institution code|
|status|	censoring status 1=censored, 2=dead|
|age|	Age in years|
|sex|	Male=1 Female=2|
|time|	Survival time in days|
|ph.ecog|	ECOG performance score (0=good 5=dead)|
|ph.karno|	Karnofsky performance score (bad=0-good=100) rated by physician|
|pat.karno|	Karnofsky performance score as rated by patient|
|meal.cal|	Calories consumed at meals|
|wt.loss|	Weight loss in last six months|

### R

Use R inside Quarto to create reproducible tables and figures with your data. If you're already using R for your programming, Quarto is very similar to RMarkdown! 

Load your data and call it back throughout the document to save yourself time when you update the data in the report. 

```{r}
#| eval: false
mockdata = read_csv("lungdat_v1.csv")
```


```{r}
#| message: false
#| echo: false
mockdata = read_csv("lungdat_v2.csv") %>% 
  mutate_at(.vars = c("inst", "status", "sex", "ph.ecog"),.funs = as.factor) 
```

:::{.callout-note}
Note that there are five types of callouts, including:
`note`, `tip`, `warning`, `caution`, and `important`.
:::


:::{.callout-caution collapse="true"}
## Expand To Learn About Collapse

This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse="true"` to collapse it by default or `collapse="false"` to make a collapsible callout that is expanded by default.
:::

Many packages, such as [`dplyr`](https://dplyr.tidyverse.org/) facilitate the ease of exploring your data. `glimpse()` shows us the dimensions of our dataframe and then the first 19 observations of each column (and the column type (i.e. 'fct' for factor)). 

```{r}
#| comment: " "
#| eval: false
mockdata %>%  
  skim()
```

```{r}

```


RMarkdown allows you to visualize your data within a document that also contains text and link those figures to text elsewhere! See? @fig-lung 

```{r}
#| label: fig-lung
#| warning: false
mockdata %>% 
  ggplot(aes(time, wt.loss, color = inst)) + 
  geom_point() +
  theme(
    legend.position = "bottom",
    legend.direction = "horizontal"
    )
```


A simple R plot is shown here @fig-r.

```{r}
#| label: fig-r
#| fig-cap: "This is a simple R plot"

plot(1:10)
```



### Observable 

* Quarto includes support for Observable JS (JavaScript)
* [create and publish notebooks](https://observablehq.com/)
* use Observable JS (“OJS”) in standalone documents 
  + works in any Quarto document (plain markdown as well as Jupyter and Knitr documents)
  + include your code in an {ojs} executable code block

```{ojs}
data = FileAttachment("lungdat_v1.csv").csv()
```

```{ojs}
filtered = data.filter(function(lung) {
  return time_min < lung.time && status.includes(lung.status);
})
```

```{ojs}
viewof time_min = Inputs.range(
  [15, 450], 
  {value: 35, step: 8, label: "Survival Time (days):"}
)
viewof status = Inputs.checkbox(
  ["1", "2"], 
  { value: ["1", "2"], 
    label: "Status:"
  }
)
```

```{ojs}
Plot.rectY(data, 
  Plot.binX(
    {y: "count"}, 
    {x: "inst", fill: "ph.ecog", thresholds: 8}
  ))
  .plot({
    marks: [
      Plot.frame(),
    ]
  }
)
```

:::{.callout-tip}
## Note

OJS cell execution and traditional notebooks: cells do not need to be defined in any particular order.

:::

### Quarto Summary

- QMD can be used to create data driven reports for your collaborators or even to write entire manuscripts! 
- QMD anatomy includes 
  1. YAML metadata  
  1. markdown text  
  1. code   
  1. output
- QMD is wizardry! 